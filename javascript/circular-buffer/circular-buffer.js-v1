'use strict';

function bufferEmptyException() { 
  return new Error('Buffer is empty.');
}

function bufferFullException() {
  return new Error('Buffer is full.');
}

function circularBuffer(size) {
  const buffer = new Array();
  
  function isEmpty() {
    return buffer.length === 0;
  };

  function isFull() {
    return buffer.length > size - 1;
  };

  return {
    clear: () => { buffer.length = 0; },
    write: (value) => {
      if (value) {
        if (isFull()) 
          throw bufferFullException();
        buffer.unshift(value);
      }
    },
    forceWrite: (value) => {
      if (isFull())
        buffer.pop();
      buffer.unshift(value);
    },
    read: () => {
      console.log('buffer: ' + buffer.join(' '));
      if (isEmpty())
        throw bufferEmptyException();
      return buffer.pop();
    }
  };
}

module.exports = {
  circularBuffer,
  bufferEmptyException,
  bufferFullException
}
