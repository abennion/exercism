var _exercism$xelm$Triangle$flippedComparison = F2(
	function (a, b) {
		var _p0 = A2(_elm_lang$core$Basics$compare, a, b);
		switch (_p0.ctor) {
			case 'LT':
				return _elm_lang$core$Basics$GT;
			case 'EQ':
				return _elm_lang$core$Basics$EQ;
			default:
				return _elm_lang$core$Basics$LT;
		}
	});
var _exercism$xelm$Triangle$triangleKind = F3(
	function (a, b, c) {
		var tri = A2(
			_elm_lang$core$List$sortWith,
			_exercism$xelm$Triangle$flippedComparison,
			_elm_lang$core$Native_List.fromArray(
				[a, b, c]));
		return _elm_lang$core$Native_Utils.eq(
			_elm_lang$core$List$sum(tri),
			0) ? _elm_lang$core$Result$Err('Invalid lengths') : ((_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$List$length(
				A2(
					_elm_lang$core$List$filter,
					function (num) {
						return _elm_lang$core$Native_Utils.cmp(num, 0) < 0;
					},
					tri)),
			0) > 0) ? _elm_lang$core$Result$Err('Invalid lengths') : ((_elm_lang$core$Native_Utils.cmp(
			A2(
				_elm_lang$core$Maybe$withDefault,
				0,
				_elm_lang$core$List$head(tri)),
			_elm_lang$core$List$sum(
				A2(
					_elm_lang$core$Maybe$withDefault,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_elm_lang$core$List$tail(tri)))) > -1) ? _elm_lang$core$Result$Err('Violates inequality') : ((_elm_lang$core$Native_Utils.eq(a, b) && _elm_lang$core$Native_Utils.eq(b, c)) ? _elm_lang$core$Result$Ok('equilateral') : ((_elm_lang$core$Native_Utils.eq(a, b) || (_elm_lang$core$Native_Utils.eq(b, c) || _elm_lang$core$Native_Utils.eq(a, c))) ? _elm_lang$core$Result$Ok('isosceles') : _elm_lang$core$Result$Ok('scalene')))));
	});
