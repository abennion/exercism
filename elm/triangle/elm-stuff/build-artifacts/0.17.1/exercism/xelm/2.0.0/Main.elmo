var _exercism$xelm$Main$tests = A2(
	_elm_community$elm_test$ElmTest$suite,
	'triangleKind',
	_elm_lang$core$Native_List.fromArray(
		[
			A2(
			_elm_community$elm_test$ElmTest$test,
			'equilateral triangles have equal sides',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_elm_lang$core$Result$Ok('equilateral'),
				A3(_exercism$xelm$Triangle$triangleKind, 2, 2, 2))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'larger equilateral triangles also have equal sides',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_elm_lang$core$Result$Ok('equilateral'),
				A3(_exercism$xelm$Triangle$triangleKind, 10, 10, 10))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'isosceles triangles have last two sides equal',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_elm_lang$core$Result$Ok('isosceles'),
				A3(_exercism$xelm$Triangle$triangleKind, 3, 4, 4))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'isosceles triangles have first and last sides equal',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_elm_lang$core$Result$Ok('isosceles'),
				A3(_exercism$xelm$Triangle$triangleKind, 4, 3, 4))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'isosceles triangles have two first sides equal',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_elm_lang$core$Result$Ok('isosceles'),
				A3(_exercism$xelm$Triangle$triangleKind, 4, 4, 3))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'isosceles triangles have in fact exactly two sides equal',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_elm_lang$core$Result$Ok('isosceles'),
				A3(_exercism$xelm$Triangle$triangleKind, 10, 10, 2))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'scalene triangles have no equal sides',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_elm_lang$core$Result$Ok('scalene'),
				A3(_exercism$xelm$Triangle$triangleKind, 3, 4, 5))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'scalene triangles have no equal sides at a larger scale too',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_elm_lang$core$Result$Ok('scalene'),
				A3(_exercism$xelm$Triangle$triangleKind, 10, 11, 12))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'scalene triangles have no equal sides at a larger scale too 2',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_elm_lang$core$Result$Ok('scalene'),
				A3(_exercism$xelm$Triangle$triangleKind, 5, 4, 2))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'very small triangles are legal',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_elm_lang$core$Result$Ok('scalene'),
				A3(_exercism$xelm$Triangle$triangleKind, 0.4, 0.6, 0.3))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'triangles with no size are illegal',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_elm_lang$core$Result$Err('Invalid lengths'),
				A3(_exercism$xelm$Triangle$triangleKind, 0, 0, 0))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'triangles with negative sides are illegal',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_elm_lang$core$Result$Err('Invalid lengths'),
				A3(_exercism$xelm$Triangle$triangleKind, 3, 4, -5))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'triangles violating triangle inequality are illegal 1',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_elm_lang$core$Result$Err('Violates inequality'),
				A3(_exercism$xelm$Triangle$triangleKind, 1, 1, 3))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'triangles violating triangle inequality are illegal 2',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_elm_lang$core$Result$Err('Violates inequality'),
				A3(_exercism$xelm$Triangle$triangleKind, 2, 4, 2))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'triangles violating triangle inequality are illegal 3',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_elm_lang$core$Result$Err('Violates inequality'),
				A3(_exercism$xelm$Triangle$triangleKind, 7, 3, 2)))
		]));
var _exercism$xelm$Main$main = {
	main: _elm_community$elm_test$ElmTest$runSuite(_exercism$xelm$Main$tests)
};
