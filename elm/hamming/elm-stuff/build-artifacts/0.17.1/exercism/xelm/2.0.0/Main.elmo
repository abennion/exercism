var _exercism$xelm$Main$tests = A2(
	_elm_community$elm_test$ElmTest$suite,
	'Hamming',
	_elm_lang$core$Native_List.fromArray(
		[
			A2(
			_elm_community$elm_test$ElmTest$test,
			'identical strands',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_elm_lang$core$Maybe$Just(0),
				A2(_exercism$xelm$Hamming$distance, 'A', 'A'))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'long identical strands',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_elm_lang$core$Maybe$Just(0),
				A2(_exercism$xelm$Hamming$distance, 'GGACTGA', 'GGACTGA'))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'complete distance in single nucleotide strands',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_elm_lang$core$Maybe$Just(1),
				A2(_exercism$xelm$Hamming$distance, 'A', 'G'))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'complete distance in small strands',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_elm_lang$core$Maybe$Just(2),
				A2(_exercism$xelm$Hamming$distance, 'AG', 'CT'))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'small distance in small strands',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_elm_lang$core$Maybe$Just(1),
				A2(_exercism$xelm$Hamming$distance, 'AT', 'CT'))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'small distance',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_elm_lang$core$Maybe$Just(1),
				A2(_exercism$xelm$Hamming$distance, 'GGACG', 'GGTCG'))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'small distance in long strands',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_elm_lang$core$Maybe$Just(2),
				A2(_exercism$xelm$Hamming$distance, 'ACCAGGG', 'ACTATGG'))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'non-unique character in first strand',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_elm_lang$core$Maybe$Just(1),
				A2(_exercism$xelm$Hamming$distance, 'AGA', 'AGG'))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'non-unique character in second strand',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_elm_lang$core$Maybe$Just(1),
				A2(_exercism$xelm$Hamming$distance, 'AGG', 'AGA'))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'large distance',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_elm_lang$core$Maybe$Just(4),
				A2(_exercism$xelm$Hamming$distance, 'GATACA', 'GCATAA'))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'large distance in off-by-one strand',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_elm_lang$core$Maybe$Just(9),
				A2(_exercism$xelm$Hamming$distance, 'GGACGGATTCTG', 'AGGACGGATTCT'))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'empty strands',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_elm_lang$core$Maybe$Just(0),
				A2(_exercism$xelm$Hamming$distance, '', ''))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'disallow first strand longer',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_elm_lang$core$Maybe$Nothing,
				A2(_exercism$xelm$Hamming$distance, 'AATG', 'AAA'))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'disallow second strand longer',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_elm_lang$core$Maybe$Nothing,
				A2(_exercism$xelm$Hamming$distance, 'ATA', 'AGTG')))
		]));
var _exercism$xelm$Main$main = {
	main: _elm_community$elm_test$ElmTest$runSuite(_exercism$xelm$Main$tests)
};
