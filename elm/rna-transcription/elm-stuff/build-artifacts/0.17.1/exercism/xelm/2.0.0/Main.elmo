var _exercism$xelm$Main$tests = A2(
	_elm_community$elm_test$ElmTest$suite,
	'RNATranscription',
	_elm_lang$core$Native_List.fromArray(
		[
			A2(
			_elm_community$elm_test$ElmTest$test,
			'complement of cytosine is guanine',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_elm_lang$core$Result$Ok('G'),
				_exercism$xelm$RNATranscription$toRNA('C'))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'complement of guanine is cytosine',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_elm_lang$core$Result$Ok('C'),
				_exercism$xelm$RNATranscription$toRNA('G'))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'complement of thymine is adenine',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_elm_lang$core$Result$Ok('A'),
				_exercism$xelm$RNATranscription$toRNA('T'))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'complement of adenine is uracil',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_elm_lang$core$Result$Ok('U'),
				_exercism$xelm$RNATranscription$toRNA('A'))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'complement',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_elm_lang$core$Result$Ok('UGCACCAGAAUU'),
				_exercism$xelm$RNATranscription$toRNA('ACGTGGTCTTAA'))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'correctly handles completely invalid input',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_elm_lang$core$Result$Err(
					_elm_lang$core$Native_Utils.chr('X')),
				_exercism$xelm$RNATranscription$toRNA('XXX'))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'correctly handles partially invalid input',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_elm_lang$core$Result$Err(
					_elm_lang$core$Native_Utils.chr('U')),
				_exercism$xelm$RNATranscription$toRNA('UGAAXXXGACAUG')))
		]));
var _exercism$xelm$Main$main = {
	main: _elm_community$elm_test$ElmTest$runSuite(_exercism$xelm$Main$tests)
};
