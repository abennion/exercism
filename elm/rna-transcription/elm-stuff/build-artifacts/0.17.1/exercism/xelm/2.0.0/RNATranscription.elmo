var _exercism$xelm$RNATranscription$transcribe = function (nuc) {
	var _p0 = nuc;
	switch (_p0.valueOf()) {
		case 'G':
			return _elm_lang$core$Maybe$Just(
				_elm_lang$core$Native_Utils.chr('C'));
		case 'C':
			return _elm_lang$core$Maybe$Just(
				_elm_lang$core$Native_Utils.chr('G'));
		case 'T':
			return _elm_lang$core$Maybe$Just(
				_elm_lang$core$Native_Utils.chr('A'));
		case 'A':
			return _elm_lang$core$Maybe$Just(
				_elm_lang$core$Native_Utils.chr('U'));
		default:
			return _elm_lang$core$Maybe$Nothing;
	}
};
var _exercism$xelm$RNATranscription$toRNA = function (strand) {
	var nuc = A2(
		_elm_lang$core$Maybe$withDefault,
		'',
		_elm_lang$core$List$head(
			A2(
				_elm_lang$core$List$map,
				function (_) {
					return _.match;
				},
				A3(
					_elm_lang$core$Regex$find,
					_elm_lang$core$Regex$AtMost(1),
					_elm_lang$core$Regex$regex('[^GCTA]'),
					strand))));
	var invalidNuc = function () {
		var _p1 = !_elm_lang$core$Native_Utils.eq(nuc, '');
		if (_p1 === true) {
			return _elm_lang$core$String$uncons(nuc);
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	}();
	var _p2 = invalidNuc;
	if (_p2.ctor === 'Just') {
		return _elm_lang$core$Result$Err(_p2._0._0);
	} else {
		return _elm_lang$core$Result$Ok(
			_elm_lang$core$String$fromList(
				A2(
					_elm_lang$core$List$filterMap,
					_exercism$xelm$RNATranscription$transcribe,
					_elm_lang$core$String$toList(strand))));
	}
};
