var _exercism$xelm$Main$lessThanTen = function (num) {
	return _elm_lang$core$Native_Utils.cmp(num, 10) < 0;
};
var _exercism$xelm$Main$isFirstLetter = F2(
	function (letter, word) {
		return _elm_lang$core$Native_Utils.eq(
			A2(_elm_lang$core$String$left, 1, word),
			letter);
	});
var _exercism$xelm$Main$odd = function (number) {
	return _elm_lang$core$Native_Utils.eq(
		A2(_elm_lang$core$Basics_ops['%'], number, 2),
		1);
};
var _exercism$xelm$Main$even = function (number) {
	return _elm_lang$core$Native_Utils.eq(
		A2(_elm_lang$core$Basics_ops['%'], number, 2),
		0);
};
var _exercism$xelm$Main$tests = A2(
	_elm_community$elm_test$ElmTest$suite,
	'Strain',
	_elm_lang$core$Native_List.fromArray(
		[
			A2(
			_elm_community$elm_test$ElmTest$test,
			'empty keep',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_elm_lang$core$Native_List.fromArray(
					[]),
				A2(
					_exercism$xelm$Strain$keep,
					_exercism$xelm$Main$lessThanTen,
					_elm_lang$core$Native_List.fromArray(
						[])))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'keep everything',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_elm_lang$core$Native_List.fromArray(
					[1, 2, 3]),
				A2(
					_exercism$xelm$Strain$keep,
					_exercism$xelm$Main$lessThanTen,
					_elm_lang$core$Native_List.fromArray(
						[1, 2, 3])))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'keep first and last',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_elm_lang$core$Native_List.fromArray(
					[1, 3]),
				A2(
					_exercism$xelm$Strain$keep,
					_exercism$xelm$Main$odd,
					_elm_lang$core$Native_List.fromArray(
						[1, 2, 3])))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'keep nothing',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_elm_lang$core$Native_List.fromArray(
					[]),
				A2(
					_exercism$xelm$Strain$keep,
					_exercism$xelm$Main$even,
					_elm_lang$core$Native_List.fromArray(
						[1, 3, 5, 7])))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'keep neither first nor last',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_elm_lang$core$Native_List.fromArray(
					[2]),
				A2(
					_exercism$xelm$Strain$keep,
					_exercism$xelm$Main$even,
					_elm_lang$core$Native_List.fromArray(
						[1, 2, 3])))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'keep strings',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_elm_lang$core$Native_List.fromArray(
					['zebra', 'zombies', 'zealot']),
				A2(
					_exercism$xelm$Strain$keep,
					_exercism$xelm$Main$isFirstLetter('z'),
					_elm_lang$core$Native_List.fromArray(
						['apple', 'zebra', 'banana', 'zombies', 'cherimoya', 'zealot'])))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'empty discard',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_elm_lang$core$Native_List.fromArray(
					[]),
				A2(
					_exercism$xelm$Strain$discard,
					_exercism$xelm$Main$lessThanTen,
					_elm_lang$core$Native_List.fromArray(
						[])))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'discard everything',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_elm_lang$core$Native_List.fromArray(
					[]),
				A2(
					_exercism$xelm$Strain$discard,
					_exercism$xelm$Main$lessThanTen,
					_elm_lang$core$Native_List.fromArray(
						[1, 2, 3])))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'discard first and last',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_elm_lang$core$Native_List.fromArray(
					[2]),
				A2(
					_exercism$xelm$Strain$discard,
					_exercism$xelm$Main$odd,
					_elm_lang$core$Native_List.fromArray(
						[1, 2, 3])))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'discard nothing',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_elm_lang$core$Native_List.fromArray(
					[1, 3, 5, 7]),
				A2(
					_exercism$xelm$Strain$discard,
					_exercism$xelm$Main$even,
					_elm_lang$core$Native_List.fromArray(
						[1, 3, 5, 7])))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'discard neither first nor last',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_elm_lang$core$Native_List.fromArray(
					[1, 3]),
				A2(
					_exercism$xelm$Strain$discard,
					_exercism$xelm$Main$even,
					_elm_lang$core$Native_List.fromArray(
						[1, 2, 3])))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'discard strings',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_elm_lang$core$Native_List.fromArray(
					['apple', 'banana', 'cherimoya']),
				A2(
					_exercism$xelm$Strain$discard,
					_exercism$xelm$Main$isFirstLetter('z'),
					_elm_lang$core$Native_List.fromArray(
						['apple', 'zebra', 'banana', 'zombies', 'cherimoya', 'zealot']))))
		]));
var _exercism$xelm$Main$main = {
	main: _elm_community$elm_test$ElmTest$runSuite(_exercism$xelm$Main$tests)
};
