var _exercism$xelm$Main$tests = A2(
	_elm_community$elm_test$ElmTest$suite,
	'Word Count',
	_elm_lang$core$Native_List.fromArray(
		[
			A2(
			_elm_community$elm_test$ElmTest$test,
			'count one word',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_elm_lang$core$Native_List.fromArray(
					[
						{ctor: '_Tuple2', _0: 'word', _1: 1}
					]),
				_elm_lang$core$Dict$toList(
					_exercism$xelm$WordCount$wordCount('word')))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'count one of each word',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_elm_lang$core$Native_List.fromArray(
					[
						{ctor: '_Tuple2', _0: 'each', _1: 1},
						{ctor: '_Tuple2', _0: 'of', _1: 1},
						{ctor: '_Tuple2', _0: 'one', _1: 1}
					]),
				_elm_lang$core$Dict$toList(
					_exercism$xelm$WordCount$wordCount('one of each')))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'multiple occurrences of a word',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_elm_lang$core$Native_List.fromArray(
					[
						{ctor: '_Tuple2', _0: 'blue', _1: 1},
						{ctor: '_Tuple2', _0: 'fish', _1: 4},
						{ctor: '_Tuple2', _0: 'one', _1: 1},
						{ctor: '_Tuple2', _0: 'red', _1: 1},
						{ctor: '_Tuple2', _0: 'two', _1: 1}
					]),
				_elm_lang$core$Dict$toList(
					_exercism$xelm$WordCount$wordCount('one fish two fish red fish blue fish')))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'ignore punctuation',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_elm_lang$core$Native_List.fromArray(
					[
						{ctor: '_Tuple2', _0: 'as', _1: 1},
						{ctor: '_Tuple2', _0: 'car', _1: 1},
						{ctor: '_Tuple2', _0: 'carpet', _1: 1},
						{ctor: '_Tuple2', _0: 'java', _1: 1},
						{ctor: '_Tuple2', _0: 'javascript', _1: 1}
					]),
				_elm_lang$core$Dict$toList(
					_exercism$xelm$WordCount$wordCount('car : carpet as java : javascript!!&@$%^&')))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'include numbers',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_elm_lang$core$Native_List.fromArray(
					[
						{ctor: '_Tuple2', _0: '1', _1: 1},
						{ctor: '_Tuple2', _0: '2', _1: 1},
						{ctor: '_Tuple2', _0: 'testing', _1: 2}
					]),
				_elm_lang$core$Dict$toList(
					_exercism$xelm$WordCount$wordCount('testing, 1, 2 testing')))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'normalize case',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_elm_lang$core$Native_List.fromArray(
					[
						{ctor: '_Tuple2', _0: 'go', _1: 3},
						{ctor: '_Tuple2', _0: 'stop', _1: 2}
					]),
				_elm_lang$core$Dict$toList(
					_exercism$xelm$WordCount$wordCount('go Go GO Stop stop'))))
		]));
var _exercism$xelm$Main$main = {
	main: _elm_community$elm_test$ElmTest$runSuite(_exercism$xelm$Main$tests)
};
