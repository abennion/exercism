var _exercism$xelm$Main$tests = A2(
	_elm_community$elm_test$ElmTest$suite,
	'Sublist',
	_elm_lang$core$Native_List.fromArray(
		[
			A2(
			_elm_community$elm_test$ElmTest$test,
			'the solution is for the correct version of the test',
			A2(_elm_community$elm_test$ElmTest$assertEqual, 2, _exercism$xelm$Sublist$version)),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'empty equals empty',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_exercism$xelm$Sublist$Equal,
				A2(
					_exercism$xelm$Sublist$sublist,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_elm_lang$core$Native_List.fromArray(
						[])))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'empty is a sublist of anything',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_exercism$xelm$Sublist$Sublist,
				A2(
					_exercism$xelm$Sublist$sublist,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_elm_lang$core$Native_List.fromArray(
						[1, 2])))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'anything is a superlist of empty',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_exercism$xelm$Sublist$Superlist,
				A2(
					_exercism$xelm$Sublist$sublist,
					_elm_lang$core$Native_List.fromArray(
						[1, 2]),
					_elm_lang$core$Native_List.fromArray(
						[])))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'1 is not 2',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_exercism$xelm$Sublist$Unequal,
				A2(
					_exercism$xelm$Sublist$sublist,
					_elm_lang$core$Native_List.fromArray(
						[1]),
					_elm_lang$core$Native_List.fromArray(
						[2])))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'compare larger equal lists',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_exercism$xelm$Sublist$Equal,
				A2(
					_exercism$xelm$Sublist$sublist,
					_elm_lang$core$Native_List.fromArray(
						[1, 1, 1]),
					_elm_lang$core$Native_List.fromArray(
						[1, 1, 1])))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'sublist at start',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_exercism$xelm$Sublist$Sublist,
				A2(
					_exercism$xelm$Sublist$sublist,
					_elm_lang$core$Native_List.fromArray(
						[1, 2, 3]),
					_elm_lang$core$Native_List.fromArray(
						[1, 2, 3, 4, 5])))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'sublist in the middle',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_exercism$xelm$Sublist$Sublist,
				A2(
					_exercism$xelm$Sublist$sublist,
					_elm_lang$core$Native_List.fromArray(
						[4, 3, 2]),
					_elm_lang$core$Native_List.fromArray(
						[5, 4, 3, 2, 1])))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'sublist at end',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_exercism$xelm$Sublist$Sublist,
				A2(
					_exercism$xelm$Sublist$sublist,
					_elm_lang$core$Native_List.fromArray(
						[3, 4, 5]),
					_elm_lang$core$Native_List.fromArray(
						[1, 2, 3, 4, 5])))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'partially matching sublist at start',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_exercism$xelm$Sublist$Sublist,
				A2(
					_exercism$xelm$Sublist$sublist,
					_elm_lang$core$Native_List.fromArray(
						[1, 1, 2]),
					_elm_lang$core$Native_List.fromArray(
						[1, 1, 1, 2])))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'sublist early in huge list',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_exercism$xelm$Sublist$Sublist,
				A2(
					_exercism$xelm$Sublist$sublist,
					_elm_lang$core$Native_List.fromArray(
						[3, 4, 5]),
					_elm_lang$core$Native_List.range(1, 100000)))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'huge sublist not in list',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_exercism$xelm$Sublist$Unequal,
				A2(
					_exercism$xelm$Sublist$sublist,
					_elm_lang$core$Native_List.range(10, 5001),
					_elm_lang$core$Native_List.range(1, 5000)))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'superlist at start',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_exercism$xelm$Sublist$Superlist,
				A2(
					_exercism$xelm$Sublist$sublist,
					_elm_lang$core$Native_List.fromArray(
						[1, 2, 3, 4, 5]),
					_elm_lang$core$Native_List.fromArray(
						[1, 2, 3])))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'superlist in middle',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_exercism$xelm$Sublist$Superlist,
				A2(
					_exercism$xelm$Sublist$sublist,
					_elm_lang$core$Native_List.fromArray(
						[5, 4, 3, 2, 1]),
					_elm_lang$core$Native_List.fromArray(
						[4, 3, 2])))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'superlist at end',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_exercism$xelm$Sublist$Superlist,
				A2(
					_exercism$xelm$Sublist$sublist,
					_elm_lang$core$Native_List.fromArray(
						[1, 2, 3, 4, 5]),
					_elm_lang$core$Native_List.fromArray(
						[3, 4, 5])))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'partially matching superlist at start',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_exercism$xelm$Sublist$Superlist,
				A2(
					_exercism$xelm$Sublist$sublist,
					_elm_lang$core$Native_List.fromArray(
						[1, 1, 1, 2]),
					_elm_lang$core$Native_List.fromArray(
						[1, 1, 2])))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'superlist early in huge list',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_exercism$xelm$Sublist$Superlist,
				A2(
					_exercism$xelm$Sublist$sublist,
					_elm_lang$core$Native_List.range(1, 100000),
					_elm_lang$core$Native_List.fromArray(
						[3, 4, 5])))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'recurring values sublist',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_exercism$xelm$Sublist$Sublist,
				A2(
					_exercism$xelm$Sublist$sublist,
					_elm_lang$core$Native_List.fromArray(
						[1, 2, 1, 2, 3]),
					_elm_lang$core$Native_List.fromArray(
						[1, 2, 3, 1, 2, 1, 2, 3, 2, 1])))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'recurring values unequal',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_exercism$xelm$Sublist$Unequal,
				A2(
					_exercism$xelm$Sublist$sublist,
					_elm_lang$core$Native_List.fromArray(
						[1, 2, 1, 2, 3]),
					_elm_lang$core$Native_List.fromArray(
						[1, 2, 3, 1, 2, 3, 2, 3, 2, 1]))))
		]));
var _exercism$xelm$Main$main = {
	main: _elm_community$elm_test$ElmTest$runSuite(_exercism$xelm$Main$tests)
};
