var _exercism$xelm$Main$tests = A2(
	_elm_community$elm_test$ElmTest$suite,
	'PhoneNumber',
	_elm_lang$core$Native_List.fromArray(
		[
			A2(
			_elm_community$elm_test$ElmTest$test,
			'cleans number',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_elm_lang$core$Maybe$Just('1234567890'),
				_exercism$xelm$PhoneNumber$getNumber('(123) 456-7890'))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'cleans number with dots',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_elm_lang$core$Maybe$Just('1234567890'),
				_exercism$xelm$PhoneNumber$getNumber('123.456.7890'))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'valid when 11 digits and first is 1',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_elm_lang$core$Maybe$Just('1234567890'),
				_exercism$xelm$PhoneNumber$getNumber('11234567890'))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'invalid when 11 digits',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_elm_lang$core$Maybe$Nothing,
				_exercism$xelm$PhoneNumber$getNumber('21234567890'))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'invalid when 9 digits',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_elm_lang$core$Maybe$Nothing,
				_exercism$xelm$PhoneNumber$getNumber('123456789'))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'invalid when 12 digits',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_elm_lang$core$Maybe$Nothing,
				_exercism$xelm$PhoneNumber$getNumber('123456789012'))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'invalid when empty',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_elm_lang$core$Maybe$Nothing,
				_exercism$xelm$PhoneNumber$getNumber(''))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'invalid when no digits present',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_elm_lang$core$Maybe$Nothing,
				_exercism$xelm$PhoneNumber$getNumber(' (-) '))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'valid with leading characters',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_elm_lang$core$Maybe$Just('1234567890'),
				_exercism$xelm$PhoneNumber$getNumber('my number is 123 456 7890'))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'valid with trailing characters',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_elm_lang$core$Maybe$Just('1234567890'),
				_exercism$xelm$PhoneNumber$getNumber('123 456 7890 - bob'))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'pretty print',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_elm_lang$core$Maybe$Just('(123) 456-7890'),
				_exercism$xelm$PhoneNumber$prettyPrint('1234567890'))),
			A2(
			_elm_community$elm_test$ElmTest$test,
			'pretty print with full us phone number',
			A2(
				_elm_community$elm_test$ElmTest$assertEqual,
				_elm_lang$core$Maybe$Just('(123) 456-7890'),
				_exercism$xelm$PhoneNumber$prettyPrint('11234567890')))
		]));
var _exercism$xelm$Main$main = {
	main: _elm_community$elm_test$ElmTest$runSuite(_exercism$xelm$Main$tests)
};
